1: Ensure the script checks if a specific file (e.g., myfile.txt) exists in the current directory. If it exists, print "File exists", otherwise print "File not found".

#!/bin/bash

file_name="myfile.txt"

if [ -e "$file_name" ]; then
    echo "File exists"
else
    echo "File not found"
fi



2: Write a script that reads numbers from the user until they enter '0'. The script should also print whether each number is odd or even.
/*
	take input from user
	check the number is 0 or not 
	if num is 0 exit script
	else check num is  even or odd & print message 
*/

#!/bin/bash
while true; do
    read -p "Enter a number (enter 0 to quit): " num
    if [[ $num -eq 0 ]]; then
        echo "Exiting the script..."
        break
    fi
    if [[ $((num % 2)) -eq 0 ]]; then
        echo "$num is even."
    else
        echo "$num is odd."
    fi
done



3: Create a function that takes a filename as an argument and prints the number of lines in the file. Call this function from your script with different filenames.

#!/bin/bash
count_lines() {
    local filename=$1
    local num_lines=$(wc -l < "$filename")
    echo "Number of lines in $filename: $num_lines"
}

count_lines "filename"

/*
	#wc -l is used to count the number of lines of file
	< --- symbol is used to redirect the contents of the file into wc -l
*/



4: Write a script that creates a directory named TestDir and inside it, creates ten files named File1.txt, File2.txt, ... File10.txt. Each file should contain its filename as its content (e.g., File1.txt contains "File1.txt").

#!/bin/bash
mkdir -p TestDir // to create directory if not exist
# Loop to create ten files
for ((i=1; i<=10; i++)); do
    filename="File${i}.txt" 
    echo "$filename" > "TestDir/$filename"  //print the message into file
done
echo "Files created successfully in TestDir."


5: Modify the script to handle errors, such as the directory already existing or lacking permissions to create files.
Add a debugging mode that prints additional information when enabled.

6: Given a sample log file, write a script using grep to extract all lines containing "ERROR". Use awk to print the date, time, and error message of each extracted line. Data Processing wit

7 : Write a script to change the permission of the group to RWX for all the file in the current director starting with T

#!/bin/bash
for filename in T*; do   // the file name start with t in directory

    if [ -f "$file" ]; then //it checks the value of the file variable is a regular file (-f)
        chmod g+rwx "$file" // it changes the group permission 
        echo "changed group permission of file '$file' to RWX." // print message
    fi
done



8 : Write a program to make the other users readonly for all the file in the director whose path will be provided by the user .

9 : Countdown Timer: Write a script that uses a while loop to countdown from 10 to 1, printing each number on a new line, and then displays "Boom!" when the countdown reaches zero.

#!/bin/bash
for i in range{10..1}; do
	echo $i
	sleep 1
done
echo "Done...!"



10 : User Input Validation: Create a script that prompts the user to enter a positive number. Use a while loop to continuously prompt the user until a positive number is entered.



11 : File Processing: Write a script that reads each line from a file named data.txt and displays each line preceded by a line number, using a while loop.



12 : Directory Traversal: Create a script that traverses through all files in a directory and its subdirectories, displaying the name and size of each file.



13 : Menu System: Implement a simple menu system using a while loop, where the user can select options such as "Add", "Delete", "View", and "Exit". The loop should continue until the user chooses to exit.



14 : Password Validation: Write a script that prompts the user to enter a password. Use a while loop to repeatedly prompt the user until a valid password (e.g., at least 8 characters with a mix of letters, numbers, and special characters) is entered.



15 : Process Monitoring: Create a script that continuously monitors a specific process (identified by its name or PID) using a while loop. Display a message if the process stops running.



16 : Downloading Files Write a script that downloads multiple files from a list of URLs stored in a file named urls.txt. Use a while loop to read each URL from the file and download the corresponding file using wget or curl.



17 : Input File Existence Check: Implement a script that prompts the user to enter the name of a file. Use a while loop to check if the file exists in the current directory. If the file does not exist, prompt the user to enter the filename again.



18 : Backup Script: Create a backup script that continuously monitors a directory for changes using a while loop. Whenever a new file is added to the directory, the script should automatically create a backup of that file in a separate directory.


